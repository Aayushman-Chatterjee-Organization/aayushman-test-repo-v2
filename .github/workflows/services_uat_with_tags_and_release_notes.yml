name: AIBA Services UAT

on:
  push:
    branches:
      - development
    # paths:
    #   - "packages/ui-services/src/**"

jobs:
  job_deploy_services:
    name: "Deploy AIBA Services"
    environment: UAT
    env:
      GIT_CLONE_USER_MAIL: ${{vars.GIT_CLONE_USER_MAIL}}
      GIT_CLONE_USER_NAME: ${{vars.GIT_CLONE_USER_NAME}}
      GIT_CLONE_CREDENTIALS: ${{secrets.GIT_CLONE_CREDENTIALS}}
    runs-on: "ubuntu-latest"
    steps:
      - id: "code_checkout"
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config --global user.email ${{env.GIT_CLONE_USER_MAIL}}
          git config --global user.name ${{env.GIT_CLONE_USER_NAME}}

      - name: Clone Repository
        run: |
          git clone https://github.com/Aayushman-Chatterjee-Organization/aayushman-test-repo-v2.git temp_repo
          # git clone https://${{ env.GIT_CLONE_CREDENTIALS }}@github.com/UL-AIBA/aiba-component-library.git temp_repo
          cd temp_repo

      - name: AIBA UI Services Package Build and Deploy
        env:
          GITHUB_TOKEN: ${{secrets.GIT_CLONE_CREDENTIALS}}
        run: |
          # yarn install
          # yarn build-ui-services
          # git clone https://${{ env.GIT_CLONE_CREDENTIALS }}@bitbucket.org/avinash_digital20_platform/aiba-component-library.git
          # git clone https://${{ env.GIT_CLONE_CREDENTIALS }}@github.com/UL-AIBA/aiba-component-library.git
          # git clone https://github.com/Aayushman-Chatterjee-Organization/aayushman-test-repo-v2.git
          # cd aiba-component-library 
          # cd aayushman-test-repo-v2
          # cd .. 

          ls
          # cp packages/ui-services/dist/* aiba-component-library -rf
          # cd aiba-component-library

          git branch -a
          ls

          # if git rev-parse --verify --quiet release_services_uat@v2.1.3 > /dev/null; then
          if git show-ref --verify --quiet refs/heads/release_services_uat@v2.1.3; then
            echo "[release_services_uat@v2.1.3] Branch exists"
            git checkout release_services_uat@v2.1.3
            git pull origin release_services_uat@v2.1.3
            git add .
            git commit -m "Updated UI Services Library"
            git push origin release_services_uat@v2.1.3
          else
            echo "[release_services_uat@v2.1.3] Branch created"
            git checkout -b release_services_uat@v2.1.3
            git add .
            git commit -m "Updated UI Services Library"
            git push origin release_services_uat@v2.1.3
          fi
          ls

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get the latest tag
          latest_tag=$(git describe --tags --abbrev=0)

          # Get commit messages since the last tag
          commit_messages=$(git log --oneline $latest_tag..HEAD)

          # Generate release notes
          echo "Release Notes" > release_notes.txt
          echo "=========================" >> release_notes.txt
          echo "Latest Tag: $latest_tag" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "Changes:" >> release_notes.txt
          echo "$commit_messages" >> release_notes.txt

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GIT_CLONE_CREDENTIALS}}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          body_path: release_notes.txt
          draft: false
          prerelease: false

      - name: Tag Commit
        if: steps.create_release.outputs.upload_url != ''
        run: git tag ${{ github.sha }} && git push --tags

      # - name: SonarQube Scan
      #   uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
      #     SONAR_HOST_URL: ${{vars.SONAR_HOST_URL}}
